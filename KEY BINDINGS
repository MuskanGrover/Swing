import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class Mainme {
   
    public static void main(String[] args) {
        // Create and run the game
        SwingUtilities.invokeLater(() -> {
            new Game();
        });
    }
}

class Game {

    JFrame frame;
    JLabel label;
    Action upAction;
    Action downAction;
    Action leftAction;
    Action rightAction;
    
    Game() {
        frame = new JFrame("KeyBinding Demo");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(420, 420);
        frame.setLayout(null);
        
        label = new JLabel();
        label.setBackground(Color.red);
        label.setBounds(100, 100, 100, 100);
        label.setOpaque(true);
        
        // Initialize actions
        upAction = new UpAction();
        downAction = new DownAction();
        leftAction = new LeftAction();
        rightAction = new RightAction();
        
        // Add key bindings
        InputMap inputMap = label.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        inputMap.put(KeyStroke.getKeyStroke("UP"), "upAction");
        inputMap.put(KeyStroke.getKeyStroke("DOWN"), "downAction");
        inputMap.put(KeyStroke.getKeyStroke("LEFT"), "leftAction");
        inputMap.put(KeyStroke.getKeyStroke("RIGHT"), "rightAction");
        
        ActionMap actionMap = label.getActionMap();
        actionMap.put("upAction", upAction);
        actionMap.put("downAction", downAction);
        actionMap.put("leftAction", leftAction);
        actionMap.put("rightAction", rightAction);
        
        frame.add(label);
        frame.setVisible(true);
    }
    
    class UpAction extends AbstractAction {
        @Override
        public void actionPerformed(ActionEvent e) {
            label.setLocation(label.getX(), label.getY() - 10);
        }       
    }
    
    class DownAction extends AbstractAction {
        @Override
        public void actionPerformed(ActionEvent e) {
            label.setLocation(label.getX(), label.getY() + 10);   
        }       
    }
    
    class LeftAction extends AbstractAction {
        @Override
        public void actionPerformed(ActionEvent e) {
            label.setLocation(label.getX() - 10, label.getY());   
        }       
    }
    
    class RightAction extends AbstractAction {
        @Override
        public void actionPerformed(ActionEvent e) {
            label.setLocation(label.getX() + 10, label.getY());
        }       
    }
}
